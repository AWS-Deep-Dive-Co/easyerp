Description: >
  This template deploys an Application Load Balancer that exposes our various ECS services.
  We create them in a seperate nested template, so it can be referenced by all of the other nested templates.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Choose which VPC the Application Load Balancer should be deployed to

  Subnets:
    Description: Choose which subnets the Application Load Balancer should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  SecurityGroup:
    Description: Select the Security Group to apply to the Application Load Balancer
    Type: AWS::EC2::SecurityGroup::Id

  CertificateSecretName:
    Description: The name of the secret in Secrets Manager that contains the certificate
    Type: String

Resources:
  ServerExampleComAcmCertificateImport:
    Type: Custom::AcmCertificateImport
    Properties:
      ServiceToken: !Sub '${AcmCertificateImportLambdaFunction.Arn}'
      # only used for updating existing certificates
      # CertificateArn: !Sub 'arn:${AWS::Partition}:acm:${AWS::Region}:${AWS::AccountId}:certificate/${CertificateId}'
      Tags:
        - Key: Name
          Value: server.example.com
        - Key: CloudFormationStackName
          Value: !Ref 'AWS::StackName'
        - Key: CloudFormationStackId
          Value: !Ref 'AWS::StackId'
      Certificate: |
        !Sub '{{resolve:secretsmanager:${CertificateSecretName}:SecretString:cert}}'
      PrivateKey: |
        !Sub '{{resolve:secretsmanager:${CertificateSecretName}:SecretString:privkey}}'
      CertificateChain: |
        !Sub '{{resolve:secretsmanager:${CertificateSecretName}:SecretString:chain}}'

  AcmCertificateImportLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !Sub '${AcmCertificateImportLambdaExecutionRole.Arn}'
      Handler: index.handler
      Timeout: 5
      Runtime: python3.12
      Code:
        ZipFile: !Sub |
          import boto3
          import cfnresponse
          def handler(event, context):
            try:
              print(event)
              rp = event["ResourceProperties"]
              # required args
              import_certificate_kwargs = {
                'Certificate': rp['Certificate'],
                'PrivateKey': rp['PrivateKey'],
              }
              # optional args
              if rp.get('CertificateArn'):
                import_certificate_kwargs['CertificateArn'] = rp['CertificateArn']
              if rp.get('CertificateChain'):
                import_certificate_kwargs['CertificateChain'] = rp['CertificateChain']
              if rp.get('Tags'):
                import_certificate_kwargs['Tags'] = rp['Tags']
              region = rp.get('Region', '${AWS::Region}')
              # import certificate
              acm = boto3.client('acm', region_name=region)
              response = acm.import_certificate(**import_certificate_kwargs)
              print('ACM ImportCertificate API response:', response)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"CertificateArn": response['CertificateArn']})
            except Exception as e:
              print('Error:', repr(e))
              cfnresponse.send(event, context, cfnresponse.FAILED, {"Message": f"Exception during processing: {repr(e)}"})
  AcmCertificateImportLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: ['sts:AssumeRole']
      ManagedPolicyArns: [!Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
      Policies:
        - PolicyName: main
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: Acm
                Effect: Allow
                Action:
                  - 'acm:AddTagsToCertificate'
                  - 'acm:ImportCertificate'
                Resource: '*'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref EnvironmentName
      Subnets: !Ref Subnets
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      SecurityGroups:
        - !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  LoadBalancerListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301

  LoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !GetAtt ServerExampleComAcmCertificateImport.CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  # ImportedCertificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     Certificate: !Sub '{{resolve:secretsmanager:${CertificateSecretName}:SecretString:cert}}'
  #     PrivateKey: !Sub '{{resolve:secretsmanager:${CertificateSecretName}:SecretString:privkey}}'
  #     CertificateChain: !Sub '{{resolve:secretsmanager:${CertificateSecretName}:SecretString:chain}}'

  # We define a default target group here, as this is a mandatory Parameters
  # when creating an Application Load Balancer Listener. This is not used, instead
  # a target group is created per-service in each service template (../services/*)
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-default
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health/
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      UnhealthyThresholdCount: 10
      TargetGroupAttributes:
           - Key: deregistration_delay.timeout_seconds
             Value: 0

Outputs:
  LoadBalancer:
    Description: A reference to the Application Load Balancer
    Value: !Ref LoadBalancer

  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !GetAtt LoadBalancer.DNSName

  Listener:
    Description: A reference to a port 443 listener
    Value: !Ref LoadBalancerListenerHTTPS

  DefaultTargetGroup:
    Description: A reference to the default target group
    Value: !Ref DefaultTargetGroup
