Description: >
  This template deploys an Application Load Balancer that exposes our various ECS services.
  We create them in a seperate nested template, so it can be referenced by all of the other nested templates.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Choose which VPC the Application Load Balancer should be deployed to

  Subnets:
    Description: Choose which subnets the Application Load Balancer should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  SecurityGroup:
    Description: Select the Security Group to apply to the Application Load Balancer
    Type: AWS::EC2::SecurityGroup::Id

  CertificateSecretName:
    Description: The name of the secret in Secrets Manager that contains the certificate
    Type: String

Resources:
  ServerExampleComAcmCertificateImport:
    Type: Custom::AcmCertificateImport
    Properties:
      ServiceToken: !Sub '${AcmCertificateImportLambdaFunc.Arn}'
      # only used for updating existing certificates
      # CertificateArn: !Sub 'arn:${AWS::Partition}:acm:${AWS::Region}:${AWS::AccountId}:certificate/${CertificateId}'
      Tags:
        - Key: Name
          Value: server.example.com
        - Key: CloudFormationStackName
          Value: !Ref 'AWS::StackName'
        - Key: CloudFormationStackId
          Value: !Ref 'AWS::StackId'
      Certificate: |
        -----BEGIN CERTIFICATE-----
        MIIDzTCCA1OgAwIBAgISBsvUG+biQvBpzYAaeqameyqIMAoGCCqGSM49BAMDMDIx
        CzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MQswCQYDVQQDEwJF
        NTAeFw0yNTA1MDYxODMwMzhaFw0yNTA4MDQxODMwMzdaMCoxKDAmBgNVBAMTH2Vh
        c3llcnAuYXdzZGVlcGRpdmV0cmFpbmluZy5jb20wWTATBgcqhkjOPQIBBggqhkjO
        PQMBBwNCAATsO4xOIr90fZsqrig+3vkbcaglrR9iZU+BLpOziDSJKNTre0voXqUk
        DNAke5xD39wqkKHVIINtl5xfMlGrSIR+o4ICTzCCAkswDgYDVR0PAQH/BAQDAgeA
        MB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB0G
        A1UdDgQWBBTETeyCAEWgkR39wNhmq3j/IGzvYzAfBgNVHSMEGDAWgBSfK1/PPCFP
        nQS37SssxMZwi9LXDTBVBggrBgEFBQcBAQRJMEcwIQYIKwYBBQUHMAGGFWh0dHA6
        Ly9lNS5vLmxlbmNyLm9yZzAiBggrBgEFBQcwAoYWaHR0cDovL2U1LmkubGVuY3Iu
        b3JnLzAqBgNVHREEIzAhgh9lYXN5ZXJwLmF3c2RlZXBkaXZldHJhaW5pbmcuY29t
        MBMGA1UdIAQMMAowCAYGZ4EMAQIBMCwGA1UdHwQlMCMwIaAfoB2GG2h0dHA6Ly9l
        NS5jLmxlbmNyLm9yZy85LmNybDCCAQQGCisGAQQB1nkCBAIEgfUEgfIA8AB2AKRC
        xQZJYGFUjw/U6pz7ei0mRU2HqX8v30VZ9idPOoRUAAABlqcSyQcAAAQDAEcwRQIg
        dsGXdpMZ4Fw+L6mD6HAp6Zln0iZN/aZxItsSN3s2fYoCIQD8TLYa4Ay34/mR80r1
        djkvdUXNZ8PqpwhFwwtuwMpOFQB2AK8YGijWjKPgqYpMnGerCfi7vCK6rryxOKOh
        ndP5tgMNAAABlqcSy/cAAAQDAEcwRQIgL5WqhHECG03kIZW10YCp5RigHmQvHtdp
        v7+eMf0OT5kCIQDr9MoChXX1jsvfC6bfbKrEgqKklA5w3EXELYbSqIFfejAKBggq
        hkjOPQQDAwNoADBlAjBWuDrbB6B2ECvLS/ZpKkYGdsl3AhSP7azaGJjpAyDKupsC
        Xjz5MZU6N1cWffoYcfgCMQC47AY2sEvhg9W+x40UsF5VpioboBy5jXcR1xdc3PSw
        8hVtu4teX1Q1i0rzPSs7mZ4=
        -----END CERTIFICATE-----
      PrivateKey: |
        -----BEGIN PRIVATE KEY-----
        MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgwpGkosdUpKF6VKO9
        vfoDVZO/gUqSkqZxPHPI9iLzf+ShRANCAATsO4xOIr90fZsqrig+3vkbcaglrR9i
        ZU+BLpOziDSJKNTre0voXqUkDNAke5xD39wqkKHVIINtl5xfMlGrSIR+
        -----END PRIVATE KEY-----      
      CertificateChain: |
        -----BEGIN CERTIFICATE-----
        MIIEVzCCAj+gAwIBAgIRAIOPbGPOsTmMYgZigxXJ/d4wDQYJKoZIhvcNAQELBQAw
        TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh
        cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjQwMzEzMDAwMDAw
        WhcNMjcwMzEyMjM1OTU5WjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg
        RW5jcnlwdDELMAkGA1UEAxMCRTUwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAQNCzqK
        a2GOtu/cX1jnxkJFVKtj9mZhSAouWXW0gQI3ULc/FnncmOyhKJdyIBwsz9V8UiBO
        VHhbhBRrwJCuhezAUUE8Wod/Bk3U/mDR+mwt4X2VEIiiCFQPmRpM5uoKrNijgfgw
        gfUwDgYDVR0PAQH/BAQDAgGGMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcD
        ATASBgNVHRMBAf8ECDAGAQH/AgEAMB0GA1UdDgQWBBSfK1/PPCFPnQS37SssxMZw
        i9LXDTAfBgNVHSMEGDAWgBR5tFnme7bl5AFzgAiIyBpY9umbbjAyBggrBgEFBQcB
        AQQmMCQwIgYIKwYBBQUHMAKGFmh0dHA6Ly94MS5pLmxlbmNyLm9yZy8wEwYDVR0g
        BAwwCjAIBgZngQwBAgEwJwYDVR0fBCAwHjAcoBqgGIYWaHR0cDovL3gxLmMubGVu
        Y3Iub3JnLzANBgkqhkiG9w0BAQsFAAOCAgEAH3KdNEVCQdqk0LKyuNImTKdRJY1C
        2uw2SJajuhqkyGPY8C+zzsufZ+mgnhnq1A2KVQOSykOEnUbx1cy637rBAihx97r+
        bcwbZM6sTDIaEriR/PLk6LKs9Be0uoVxgOKDcpG9svD33J+G9Lcfv1K9luDmSTgG
        6XNFIN5vfI5gs/lMPyojEMdIzK9blcl2/1vKxO8WGCcjvsQ1nJ/Pwt8LQZBfOFyV
        XP8ubAp/au3dc4EKWG9MO5zcx1qT9+NXRGdVWxGvmBFRAajciMfXME1ZuGmk3/GO
        koAM7ZkjZmleyokP1LGzmfJcUd9s7eeu1/9/eg5XlXd/55GtYjAM+C4DG5i7eaNq
        cm2F+yxYIPt6cbbtYVNJCGfHWqHEQ4FYStUyFnv8sjyqU8ypgZaNJ9aVcWSICLOI
        E1/Qv/7oKsnZCWJ926wU6RqG1OYPGOi1zuABhLw61cuPVDT28nQS/e6z95cJXq0e
        K1BcaJ6fJZsmbjRgD5p3mvEf5vdQM7MCEvU0tHbsx2I5mHHJoABHb8KVBgWp/lcX
        GWiWaeOyB7RP+OfDtvi2OsapxXiV7vNVs7fMlrRjY1joKaqmmycnBvAq14AEbtyL
        sVfOS66B8apkeFX2NY4XPEYV4ZSCe8VHPrdrERk2wILG3T/EGmSIkCYVUMSnjmJd
        VQD9F6Na/+zmXCc=
        -----END CERTIFICATE-----     

  AcmCertificateImportLambdaFunc:
    Type: AWS::Lambda::Function
    Properties:
      Role: !Sub '${AcmCertificateImportLambdaExecutionRole.Arn}'
      Handler: index.handler
      Timeout: 5
      Runtime: python3.12
      Code:
        ZipFile: !Sub |
          import boto3
          import cfnresponse
          def handler(event, context):
            try:
              print(event)
              rp = event["ResourceProperties"]
              # required args
              import_certificate_kwargs = {
                'Certificate': rp['Certificate'],
                'PrivateKey': rp['PrivateKey'],
              }
              # optional args
              if rp.get('CertificateArn'):
                import_certificate_kwargs['CertificateArn'] = rp['CertificateArn']
              if rp.get('CertificateChain'):
                import_certificate_kwargs['CertificateChain'] = rp['CertificateChain']
              if rp.get('Tags'):
                import_certificate_kwargs['Tags'] = rp['Tags']
              region = rp.get('Region', '${AWS::Region}')
              # import certificate
              acm = boto3.client('acm', region_name=region)
              response = acm.import_certificate(**import_certificate_kwargs)
              print('ACM ImportCertificate API response:', response)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"CertificateArn": response['CertificateArn']})
            except Exception as e:
              print('Error:', repr(e))
              cfnresponse.send(event, context, cfnresponse.FAILED, {"Message": f"Exception during processing: {repr(e)}"})
  AcmCertificateImportLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: ['sts:AssumeRole']
      ManagedPolicyArns: [!Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
      Policies:
        - PolicyName: main
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: Acm
                Effect: Allow
                Action:
                  - 'acm:AddTagsToCertificate'
                  - 'acm:ImportCertificate'
                Resource: '*'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref EnvironmentName
      Subnets: !Ref Subnets
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      SecurityGroups:
        - !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  LoadBalancerListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301

  LoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !GetAtt ServerExampleComAcmCertificateImport.CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  # ImportedCertificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     Certificate: !Sub '{{resolve:secretsmanager:${CertificateSecretName}:SecretString:cert}}'
  #     PrivateKey: !Sub '{{resolve:secretsmanager:${CertificateSecretName}:SecretString:privkey}}'
  #     CertificateChain: !Sub '{{resolve:secretsmanager:${CertificateSecretName}:SecretString:chain}}'

  # We define a default target group here, as this is a mandatory Parameters
  # when creating an Application Load Balancer Listener. This is not used, instead
  # a target group is created per-service in each service template (../services/*)
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-default
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health/
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      UnhealthyThresholdCount: 10
      TargetGroupAttributes:
           - Key: deregistration_delay.timeout_seconds
             Value: 0

Outputs:
  LoadBalancer:
    Description: A reference to the Application Load Balancer
    Value: !Ref LoadBalancer

  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !GetAtt LoadBalancer.DNSName

  Listener:
    Description: A reference to a port 443 listener
    Value: !Ref LoadBalancerListenerHTTPS

  DefaultTargetGroup:
    Description: A reference to the default target group
    Value: !Ref DefaultTargetGroup
